# 自動ビルド用ワークフローのテンプレート
name: Build

# push または PR 作成・更新時、リリース公開時に実行
on:
  push:
  pull_request:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    # 自分のリポジトリに作成した PR のブランチを push した場合、同じワークフローが二重発火してしまう
    # これを回避するため、自分のリポジトリに対する PR ではこの job を実行しない
    if: >
      github.event_name == 'push' ||
      github.event.pull_request.head.repo.full_name != github.repository

    steps:
      # `git clone` を行う
      - name: Checkout
        uses: actions/checkout@v2

      # `git describe --tags` コマンドを行う
      - name: Git describe
        id: ghd
        uses: proudust/gh-describe@v1

      # ここに任意のビルド処理を加える
      # 仮に ghactions-playground-`git describe --tags`.txt を成果物として扱う
      - name: "[Insert Build Scripts here]"
        run: >
          echo 'ghactions-playground-${{ steps.ghd.outputs.describe }}'
          >'ghactions-playground-${{ steps.ghd.outputs.describe }}.txt'

      # 成果物をワークフローのログからダウンロードできるようにアップロード
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ghactions-playground-${{ steps.ghd.outputs.describe }}.txt
          path: ghactions-playground-${{ steps.ghd.outputs.describe }}.txt

      # タグ push 時及びリリース作成時は更にリリースを作成・更新する
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # 既に存在する場合は更新
          artifacts: ghactions-playground-${{ steps.ghd.outputs.describe }}.txt # ここに成果物
          draft: true # ドラフトリリースとして作成
          omitBodyDuringUpdate: true # 本文は更新しない
          omitNameDuringUpdate: true # タイトルは更新しない
          tag: ${{ steps.ghd.outputs.tag }} # タグ名
          token: ${{ secrets.GITHUB_TOKEN }}
